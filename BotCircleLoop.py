import re
import os
import json
import shutil
import subprocess
import logging
import asyncio
import aiogram.exceptions
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from PIL import Image, ImageDraw
import aiofiles
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from database import init_db, add_user, get_users

FFMPEG_PATH = "ffmpeg"  # –∏–ª–∏ —É–∫–∞–∂–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# üìå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É users.json –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ —Å –±–æ—Ç–æ–º
USERS_FILE = os.path.join(BASE_DIR, "users.json")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

class ChangeEmojiState(StatesGroup):
    waiting_for_sticker = State()
    waiting_for_new_emoji = State()

user_video_files = {}  # {user_id: file_id} - –í–∏–¥–µ–æ—Ñ–∞–π–ª –æ–±—ã—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ
user_video_notes = {}  # {user_id: file_id} - –í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ast_video_file_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ
last_received_file_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞
last_video_file_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ
last_video_sender_id = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤–∏–¥–µ–æ

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–º–æ–¥–∑–∏
EMOJI_REGEX = re.compile("[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F700-\U0001F77F"
                         "\U0001F780-\U0001F7FF\U0001F800-\U0001F8FF\U0001F900-\U0001F9FF\U0001FA00-\U0001FA6F"
                         "\U0001FA70-\U0001FAFF\U00002702-\U000027B0\U000024C2-\U0001F251]+", re.UNICODE)

# –£—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π Telegram API-—Ç–æ–∫–µ–Ω
TOKEN = "2073282100:AAGnrJMzfUcIelhlfNRH7ZRO9S005Nd0nvU"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class ChangeEmojiState(StatesGroup):
    waiting_for_sticker = State()
    waiting_for_new_emoji = State()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_FOLDER = "temp"
os.makedirs(TEMP_FOLDER, exist_ok=True)

def create_circle_mask(mask_path):
    """–°–æ–∑–¥–∞–µ—Ç PNG-–º–∞—Å–∫—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –∫—Ä—É–≥–æ–º."""
    size = (512, 512)
    mask = Image.new("L", size, 0)
    draw = ImageDraw.Draw(mask)
    draw.ellipse((0, 0, size[0], size[1]), fill=255)
    mask.save(mask_path)

@dp.message(Command("start"))
async def handle_start_command(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (—Ç–∏—Ö–æ) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_username = f"@{message.from_user.username}" if message.from_user.username else "‚Äî"

    await init_db()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    users = await get_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    if not any(user[0] == user_id for user in users):
        await add_user(user_id, user_name, user_username)
        users = await get_users()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    logging.info(f"–í –±–∞–∑–µ —É–∂–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫", callback_data="convert_to_video_note")],
        [InlineKeyboardButton(text="üè∑Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –≤ —Å—Ç–∏–∫–µ—Ä", callback_data="convert_to_sticker")]
    ])
    await message.answer(
    "–ü—Ä–∏–≤–µ—Ç! üéâ\n"
    "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫!\n"
    "(–í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ ‚â§60 —Å–µ–∫—É–Ω–¥)\n"
    "–ê –µ—â—ë, —è —É–º–µ—é –¥–µ–ª–∞—Ç—å –∏–∑ –≤–∞—à–∏—Ö –∫—Ä—É–∂–∫–æ–≤ —Å—Ç–∏–∫–µ—Ä—ã!\n"
    "(–°—Ç–∏–∫–µ—Ä ‚â§3 —Å–µ–∫—É–Ω–¥)\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=keyboard
)

@dp.callback_query(F.data == "convert_to_video_note")
async def handle_convert_to_video_note(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ üé•'"""
    await call.message.edit_text(
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫! (–¥–æ 20–º–±)",
        reply_markup=None
    )

@dp.callback_query(F.data == "convert_to_sticker")
async def handle_convert_to_sticker(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –≤ –≤–∏–¥–µ–æ—Å—Ç–∏–∫–µ—Ä üè∑Ô∏è'"""
    await call.message.edit_text(
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ –≤–∏–¥–µ–æ—Å—Ç–∏–∫–µ—Ä!",
        reply_markup=None
    )

@dp.callback_query(F.data == "convert_video")
async def handle_convert_video_to_sticker(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–∫–µ—Ä'."""
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id
    if user_id not in user_video_notes:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return

    file_id = user_video_notes[user_id]  # –î–æ—Å—Ç–∞–µ–º file_id –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    input_path = os.path.join(TEMP_FOLDER, f"input_{file_id}.mp4")
    output_path = os.path.join(TEMP_FOLDER, f"output_{file_id}.webm")

    file_info = await bot.get_file(file_id)
    await bot.download_file(file_info.file_path, input_path)

    mask_path = os.path.join(TEMP_FOLDER, "circle_mask.png")
    if not os.path.exists(mask_path):
        create_circle_mask(mask_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ –≤ —Å—Ç–∏–∫–µ—Ä —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –º–∞—Å–∫–∏
    convert_command = [
        FFMPEG_PATH, "-y", "-i", input_path, "-i", mask_path,
        "-filter_complex", "[0:v]scale=512:512,format=rgba[vid];[1:v]format=rgba[mask];[vid][mask]alphamerge",
        "-c:v", "libvpx-vp9", "-crf", "18", "-b:v", "500K", "-r", "30", "-an",
        output_path
    ]
    subprocess.run(convert_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if not os.path.exists(output_path):
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–∫–µ—Ä.")
        return

    bot_info = await bot.me()
    pack_name = f"sticker_pack_{user_id}_by_{bot_info.username}"

    send_sticker = False
    pack_exists = False

    try:
        await bot.get_sticker_set(name=pack_name)
        pack_exists = True
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: {pack_name}")
    except aiogram.exceptions.TelegramBadRequest:
        logging.info(f"‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä–ø–∞–∫ {pack_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")

    sticker_file = FSInputFile(output_path)

    if not pack_exists:
        logging.info("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞...")
        pack_url = await create_sticker_pack(user_id=user_id, sticker_file=output_path)
        if pack_url:
            text = f"‚úÖ –í–∞—à —Å—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫! üéâ\n\n[–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–æ—Ä]({pack_url})"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞."
    else:
        logging.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫...")
        response = await add_sticker_to_pack(user_id, output_path)
        if response:
            text = "‚úÖ –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –Ω–∞–±–æ—Ä!"
            send_sticker = True
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data=f"change_emoji_{file_id[:50]}")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await call.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    if send_sticker:
        await bot.send_sticker(user_id, sticker_file)

    os.remove(input_path)
    os.remove(output_path)

@dp.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'."""
    await handle_start_command(call.message)

@dp.message(F.video)
async def handle_video_to_video_note(message: types.Message):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫."""
    global last_video_file_id, last_video_sender_id

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id})")
    await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å... ‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    file_id = message.video.file_id
    last_video_file_id = file_id  
    last_video_sender_id = message.from_user.id  

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = message.video.file_size  
    max_size = 20 * 1024 * 1024  # 20MB
    
    if file_size > max_size:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! üìÅ\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä–æ–º **–Ω–µ –±–æ–ª–µ–µ 20 MB**.")
        return

    file_info = await bot.get_file(file_id)
    input_path = os.path.join(TEMP_FOLDER, f"input_{file_id}.mp4")
    output_path = os.path.join(TEMP_FOLDER, f"output_{file_id}.mp4")

    await bot.download_file(file_info.file_path, input_path)

    convert_command = [
        FFMPEG_PATH, "-y", "-i", input_path,
        "-vf", "crop=min(in_w\\,in_h):min(in_w\\,in_h),scale=512:512",
        "-c:v", "libx264", "-preset", "veryslow", "-crf", "15", "-b:v", "800K",
        "-r", "30", "-c:a", "aac", "-b:a", "192k",
        output_path
    ]


    subprocess.run(convert_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ user_video_notes
    sent_video = await message.answer_video_note(FSInputFile(output_path))
    user_video_notes[message.from_user.id] = sent_video.video_note.file_id  # <-- –í–∞–∂–Ω–æ!

    video_duration = message.video.duration  
    if video_duration > 3:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÇÔ∏è –£–∫–æ—Ä–æ—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä", callback_data="trim_and_convert_video")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await message.answer("‚ö†Ô∏è –í–∞—à–µ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥. –Ø –º–æ–≥—É —É–∫–æ—Ä–æ—Ç–∏—Ç—å –µ–≥–æ –∏ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä.", reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè∑Ô∏è –°–¥–µ–ª–∞—Ç—å –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–∫–µ—Ä", callback_data="convert_video")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await message.answer("‚úÖ –í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –≥–æ—Ç–æ–≤! –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–∫–µ—Ä?", reply_markup=keyboard)

    os.remove(input_path)
    os.remove(output_path)

@dp.message(F.video_note)
async def handle_video_note_to_sticker(message: types.Message):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –≤ —Å—Ç–∏–∫–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è—è –¥–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id})")
    await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... ‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
    file_id = message.video_note.file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_video_notes[user_id] = file_id  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!

    if message.video_note.duration > 3:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–∫–æ—Ä–æ—Ç–∏—Ç—å", callback_data="trim_video")],
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–ª—é –µ—â—ë —Ä–∞–∑", callback_data="trim_video_cancel")]
        ])
        await message.answer("‚ö†Ô∏è –í–∞—à –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥. –£–∫–æ—Ä–æ—Ç–∏—Ç—å –µ–≥–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π?", reply_markup=keyboard)
        return

    await process_video_note(message, file_id=file_id, user_id=user_id)

@dp.callback_query(F.data == "trim_and_convert_video")
async def handle_trim_and_convert_callback(call: CallbackQuery):
    """–û–±—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–æ 3 —Å–µ–∫—É–Ω–¥ –∏ —Å—Ä–∞–∑—É –¥–µ–ª–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–∫–µ—Ä."""
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id
    if user_id not in user_video_notes:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return

    file_id = user_video_notes[user_id]  # –î–æ—Å—Ç–∞–µ–º file_id –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    input_path = os.path.join(TEMP_FOLDER, f"input_{file_id}.mp4")
    trimmed_path = os.path.join(TEMP_FOLDER, f"trimmed_{file_id}.mp4")

    file_info = await bot.get_file(file_id)
    await bot.download_file(file_info.file_path, input_path)

    # –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥
    trim_command = [
        "ffmpeg", "-y", "-i", input_path, "-t", "3",
        "-c:v", "libx264", "-preset", "ultrafast", "-an", trimmed_path
    ]
    subprocess.run(trim_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    shutil.move(trimmed_path, input_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º file_id
    trimmed_video = FSInputFile(input_path)
    sent_video = await bot.send_video_note(call.message.chat.id, trimmed_video)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π file_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_video_notes[user_id] = sent_video.video_note.file_id

    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∂–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–∫–µ—Ä
    await process_video_note(call.message, file_id=user_video_notes[user_id], user_id=user_id)

@dp.callback_query(F.data == "trim_video")
async def handle_trim_callback(call: CallbackQuery):
    """–û–±—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–æ 3 —Å–µ–∫—É–Ω–¥ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å—Ç–∏–∫–µ—Ä."""
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id
    if user_id not in user_video_notes:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return

    file_id = user_video_notes[user_id]  # –î–æ—Å—Ç–∞–µ–º file_id –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    input_path = os.path.join(TEMP_FOLDER, f"input_{file_id}.mp4")
    trimmed_path = os.path.join(TEMP_FOLDER, f"trimmed_{file_id}.mp4")

    file_info = await bot.get_file(file_id)
    await bot.download_file(file_info.file_path, input_path)

    # –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥
    trim_command = [
        "ffmpeg", "-y", "-i", input_path, "-t", "3",
        "-c:v", "libx264", "-preset", "ultrafast", "-an", trimmed_path
    ]
    subprocess.run(trim_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    shutil.move(trimmed_path, input_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º file_id
    trimmed_video = FSInputFile(input_path)
    sent_video = await bot.send_video_note(call.message.chat.id, trimmed_video)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π file_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_video_notes[user_id] = sent_video.video_note.file_id

    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∂–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    await process_video_note(call.message, file_id=user_video_notes[user_id], user_id=user_id)

@dp.callback_query(F.data.startswith("change_emoji_"))
async def handle_change_emoji_button(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã —ç–º–æ–¥–∑–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞."""
    user_id = int(call.data.replace("change_emoji_", ""))  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ `file_id` —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_video_notes:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —ç–º–æ–¥–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    sticker_file_id = user_video_notes[user_id]  # –ë–µ—Ä—ë–º `file_id` –∏–∑ user_video_notes

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    logging.info(f"–°–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏: user_id={user_id}, file_id={sticker_file_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º `file_id` –≤ state
    await state.update_data(sticker_file_id=sticker_file_id)
    await state.set_state(ChangeEmojiState.waiting_for_new_emoji)

    await call.message.answer("üî§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞.")

async def create_sticker_pack(user_id: int, sticker_file: str):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bot_info = await bot.me()

    if user_id == bot_info.id:
        print("‚ùå –û—à–∏–±–∫–∞: user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å bot.id! –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è.")
        return None  # –ù–µ —Å–æ–∑–¥–∞—ë–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –µ—Å–ª–∏ ID –±–æ—Ç–∞
    
    pack_name = f"sticker_pack_{user_id}_by_{bot_info.username}"
    pack_title = f"–°—Ç–∏–∫–µ—Ä—ã –æ—Ç @{bot_info.username}"

    sticker = FSInputFile(sticker_file)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª

    response = await bot.create_new_sticker_set(
        user_id=user_id,
        name=pack_name,
        title=pack_title,
        sticker_format="video",
        stickers=[
            {
                "sticker": sticker,
                "emoji_list": ["üé•"],
                "format": "video"  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–õ–Ø–ï–ú format
            }
        ]
    )

    if response:
        return f"https://t.me/addstickers/{pack_name}"
    
    return None

async def add_sticker_to_pack(user_id: int, sticker_file: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫"""
    bot_info = await bot.me()
    pack_name = f"sticker_pack_{user_id}_by_{bot_info.username}"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞
    try:
        sticker_set = await bot.get_sticker_set(name=pack_name)
        sticker_file_ids = [sticker.file_id for sticker in sticker_set.stickers]

        # –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä —É–∂–µ –≤ –Ω–∞–±–æ—Ä–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if sticker_file in sticker_file_ids:
            logging.info(f"‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞–±–æ—Ä–µ {pack_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
            return "‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –Ω–∞–±–æ—Ä–µ!"
    except aiogram.exceptions.TelegramBadRequest:
        pass  # –ï—Å–ª–∏ –Ω–∞–±–æ—Ä–∞ –µ—â–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    if not os.path.exists(sticker_file):  
        file_info = await bot.get_file(sticker_file)
        sticker_file_path = os.path.join(TEMP_FOLDER, f"sticker_{user_id}.webm")
        await bot.download_file(file_info.file_path, sticker_file_path)
    else:
        sticker_file_path = sticker_file

    async with aiofiles.open(sticker_file_path, "rb") as f:
        sticker = FSInputFile(sticker_file_path)

    try:
        response = await bot.add_sticker_to_set(
            user_id=user_id,
            name=pack_name,
            sticker={"sticker": sticker, "format": "video", "emoji_list": ["üé•"]}
        )
        return response
    except aiogram.exceptions.TelegramBadRequest as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        return None

async def process_video_note(message: types.Message, file_id: str = None, user_id: int = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ–æ—Å—Ç–∏–∫–µ—Ä."""
    
    if user_id is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if file_id is None:
        if user_id in user_video_notes:
            file_id = user_video_notes[user_id]
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
            return
    
    input_path = os.path.join(TEMP_FOLDER, f"input_{file_id}.mp4")
    output_path = os.path.join(TEMP_FOLDER, f"output_{file_id}.webm")

    file_info = await bot.get_file(file_id)
    await bot.download_file(file_info.file_path, input_path)

    mask_path = os.path.join(TEMP_FOLDER, "circle_mask.png")
    if not os.path.exists(mask_path):
        create_circle_mask(mask_path)

    convert_command = [
        FFMPEG_PATH, "-y", "-i", input_path, "-i", mask_path,
        "-filter_complex", "[0:v]scale=512:512,format=rgba[vid];[1:v]format=rgba[mask];[vid][mask]alphamerge",
        "-c:v", "libvpx-vp9", "-crf", "18", "-b:v", "500K", "-r", "30", "-an",
        output_path
    ]
    subprocess.run(convert_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if not os.path.exists(output_path):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–∫–µ—Ä.")
        return

    bot_info = await bot.me()
    logging.info(f"üÜî user_id: {user_id}, bot_id: {bot_info.id}")

    if user_id == bot_info.id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–∞–º –¥–ª—è —Å–µ–±—è.")
        return

    pack_name = f"sticker_pack_{user_id}_by_{bot_info.username}"

    send_sticker = False
    pack_exists = False

    try:
        await bot.get_sticker_set(name=pack_name)
        pack_exists = True
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: {pack_name}")
    except aiogram.exceptions.TelegramBadRequest:
        logging.info(f"‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä–ø–∞–∫ {pack_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")

    sticker_file = FSInputFile(output_path)

    if not pack_exists:
        logging.info("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞...")
        pack_url = await create_sticker_pack(user_id=user_id, sticker_file=output_path)
        if pack_url:
            text = f"‚úÖ –í–∞—à —Å—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫! üéâ\n\n[–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–æ—Ä]({pack_url})"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞."
    else:
        logging.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫...")
        response = await add_sticker_to_pack(user_id, output_path)
        if response:
            text = "‚úÖ –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –Ω–∞–±–æ—Ä!"
            send_sticker = True
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data=f"change_emoji_{user_id}")],  # –ü–µ—Ä–µ–¥–∞—ë–º user_id, –∞ –Ω–µ file_id
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    if send_sticker:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–∏–π file_id
        sticker_message = await bot.send_sticker(user_id, sticker_file)
        sticker_real_file_id = sticker_message.sticker.file_id  # –ù–∞—Å—Ç–æ—è—â–∏–π file_id

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π file_id —Å—Ç–∏–∫–µ—Ä–∞: {sticker_real_file_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π file_id –≤ user_video_notes
        user_video_notes[user_id] = sticker_real_file_id

    os.remove(input_path)
    os.remove(output_path)

@dp.callback_query(F.data == "trim_video_cancel")
async def handle_cancel_callback(call: CallbackQuery):
    await call.message.edit_text("–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–æ 3 —Å–µ–∫—É–Ω–¥.")

@dp.message(Command("cancel")) 
async def handle_cancel_command(message: types.Message):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞."""
    global last_received_file_id
    last_received_file_id = None  # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –±—ã–ª

    await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start.")

@dp.message(Command("feedback"))
async def handle_feedback_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏."""
    await message.answer(
        "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π:\n"
        "üì± Telegram: @evgeniibelov\n"
        "üåç –ö–∞–Ω–∞–ª: https://t.me/Evz1cka\n\n"
        "–ë—É–¥—É —Ä–∞–¥ –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º! üòä"
    )

@dp.message(Command("mypack"))
async def handle_mypack_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–æ–≤."""
    bot_info = await bot.me()
    pack_name = f"sticker_pack_{message.from_user.id}_by_{bot_info.username}"

    try:
        sticker_set = await bot.get_sticker_set(name=pack_name)
        text = f"üé® –í–∞—à–∏ —Å—Ç–∏–∫–µ—Ä—ã: [{sticker_set.title}](https://t.me/addstickers/{pack_name})"
    except aiogram.exceptions.TelegramBadRequest:
        text = "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫, –∏ —è —Å–¥–µ–ª–∞—é –ø–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä!"

    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("changeemojis"))
async def handle_change_emojis_command(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–º–µ–Ω—ã —ç–º–æ–¥–∑–∏ —É —Å—Ç–∏–∫–µ—Ä–∞."""
    await state.set_state(ChangeEmojiState.waiting_for_sticker)
    await message.answer("üé≠ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä –∏–∑ –≤–∞—à–µ–≥–æ –Ω–∞–±–æ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏.")

@dp.message(F.sticker, ChangeEmojiState.waiting_for_sticker)
async def receive_sticker(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏."""
    sticker_file_id = message.sticker.file_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º `file_id`, –∞ –Ω–µ `file_unique_id`

    await state.update_data(sticker_file_id=sticker_file_id)
    await state.set_state(ChangeEmojiState.waiting_for_new_emoji)

    await message.answer("üî§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")

@dp.message(ChangeEmojiState.waiting_for_new_emoji)
async def receive_new_emoji(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –∏ –º–µ–Ω—è–µ—Ç –µ–≥–æ —É —Å—Ç–∏–∫–µ—Ä–∞."""
    user_data = await state.get_data()
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_emoji = message.text.strip()

    if user_id not in user_video_notes:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –°—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π `file_id` –∏–∑ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞
    bot_info = await bot.me()
    pack_name = f"sticker_pack_{user_id}_by_{bot_info.username}"

    try:
        sticker_set = await bot.get_sticker_set(name=pack_name)
        sticker_file_id = sticker_set.stickers[-1].file_id  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∏–∫–µ—Ä
    except aiogram.exceptions.TelegramBadRequest:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∏–∫–µ—Ä –≤ –≤–∞—à–µ–º –Ω–∞–±–æ—Ä–µ.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º `file_id`, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    logging.info(f"–ü–µ—Ä–µ–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π file_id –≤ set_sticker_emoji_list: {sticker_file_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —ç–º–æ–¥–∑–∏
    if not EMOJI_REGEX.fullmatch(new_emoji):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ **—Ç–æ–ª—å–∫–æ** –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ (–Ω–µ —Ç–µ–∫—Å—Ç, –Ω–µ —Å–∏–º–≤–æ–ª—ã, –∞ —ç–º–æ–¥–∑–∏)!")
        return

    try:
        response = await bot.set_sticker_emoji_list(sticker=sticker_file_id, emoji_list=[new_emoji])
        if response:
            await message.answer(f"‚úÖ –≠–º–æ–¥–∑–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {new_emoji}!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–º–æ–¥–∑–∏.")
    except aiogram.exceptions.TelegramBadRequest as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await state.clear()

@dp.message(Command("broadcast"))
async def send_broadcast(message: types.Message):
    """–ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    admin_id = 987927261  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π user_id
    if message.from_user.id != admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/broadcast`.")
        return

    users = load_users()
    success_count = 0
    fail_count = 0

    for user in users:  # –ó–¥–µ—Å—å user - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –Ω–∞–¥–æ –±—Ä–∞—Ç—å user['id']
        try:
            await bot.send_message(user['id'], text)  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º user['id'], –∞ –Ω–µ –≤–µ—Å—å user
            success_count += 1
        except aiogram.exceptions.TelegramForbiddenError:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['id']} ({user['name']}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            fail_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
            fail_count += 1

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n‚ö†Ô∏è –û—à–∏–±–∫–∏ —É {fail_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(Command("users"))
async def show_users(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    admin_id = 987927261  # üîπ –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π user_id
    if message.from_user.id != admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É.")
        return

    users = load_users()
    if not users:
        await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_list = "\n".join([
        f"üÜî {user['id']} | üë§ {user['name']} | {user['username']}" for user in users
    ])
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")

@dp.message()
async def handle_unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."""
    await message.answer(
        "‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∏!\n\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
        "üîπ /start ‚Äì –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
        "üîπ /cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "üîπ /mypack ‚Äì –≤–∞—à–∏ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∏\n"
        "üîπ /changeemojis ‚Äì —Å–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏ —É —Å—Ç–∏–∫–µ—Ä–∞ (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:üé•)\n"
        "üîπ /feedback ‚Äì –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞"
    )

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
